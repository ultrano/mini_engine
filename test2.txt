
dofile("vec2.mn");
dofile("vec3.mn");

var foo1 = func()
{
  ::print(1);
  yield;
  ::print(2);
  yield;
  ::print(3);
  yield;
  ::print(4);
};

foo1 = fiber.new(foo1);
foo1.next();
foo1.next();
foo1.next();
foo1.next();
foo1.reset();
foo1.next();
foo1.next();
foo1.next();
foo1.next();

//*
var gameobject = 
{
  objects : [],
  new  : func() 
         {
		   var obj = ::setmeta({}, this);
		   objects.add(obj);
		   return obj;
		 },
  frame : func() { if (update.next() == false) update.reset(); },
  startcoroutine : func(f) { this.insert("update", ::fiber.new(::delegator(f,this))); },
  "~"   : func()
          {},
  "->"  : this,
};

var obj = gameobject.new();
var update = func()
{
  var ch = 0;
  while ((ch = ::getch()) == -1) yield;
  ::print(ch);
};

obj.startcoroutine(update);



//! game loop
while (true)
{
  gameobject.objects.iterate(func(k,v) { v.frame(); } );
}
//*/
