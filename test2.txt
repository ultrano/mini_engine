
var vector2 = 
{
  type   : "vector2",
  new    : func(x, y) { var v = {x: ::float(x), y: ::float(y)}; ::setmeta(v, this); return v; },
  length : func() { return ::sqrt(x*x + y*y); },
  dot    : func() { return new(x*x, y*y); },
  add    : func(v) { return new(x+v.x, y+v.y);},
  sub    : func(v) { return new(x-v.x, y-v.y);},
  scale  : func(f) { x *= f; y *= f; return this; },
  "->"   : this,
  "=="   : func(val) { return (x == val.x && y == val.y); },
  "+"    : add,
  "-"    : sub,
  "~"    : func() { ::print("vector2 finalized"); },
};

print("ss");
var getIterator = func(t)
{
  var itor = {};
  while (vector2.traverse(itor))
  {
    yield itor.key;
  }
};

var itor = fiber.new(getIterator);
::print(itor.type);

while (itor.next())
{
  print("value: " + itor.value());
}
